<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.2.RELEASE</version>
		<relativePath/>
	</parent>
	
	<groupId>de.tforneberg</groupId>
	<artifactId>PatchDb</artifactId>
	<version>${version}</version>
	
	<packaging>${packaging}</packaging>
	
	<name>PatchDb</name>
	<description>PatchDB Backend</description> 

	<properties>
		<packaging>jar</packaging><!-- set to war for creating WAR (without Tomcat) instead of JAR (with Tomcat) -->
		<version>0.0.1-SNAPSHOT</version>
		
		<java.version>1.8</java.version>
		<thumbnailator.version>0.4.8</thumbnailator.version>
		<typescript.codegeneration.version>2.17.558</typescript.codegeneration.version>
		<amazon.awssdk.version>2.4.12</amazon.awssdk.version>
		<modelmapper.version>2.3.4</modelmapper.version>
		
		<typescript.codegeneration.pattern>de.tforneberg.patchdb.model.**</typescript.codegeneration.pattern>
		
		<frontend.path>${project.basedir}/../patchdb_frontend/</frontend.path>
		<frontend.generated.file.path>${frontend.path}src/model/Model.ts</frontend.generated.file.path>
		<compiled.frontend.path>${frontend.path}target/dist</compiled.frontend.path>
	</properties> 
	
	<dependencyManagement>
	   <dependencies>
		   <dependency><!-- Amazon AWS Dependency version management bom -->
		      <groupId>software.amazon.awssdk</groupId>
		      <artifactId>bom</artifactId>
		      <version>${amazon.awssdk.version}</version>
		      <type>pom</type>
		      <scope>import</scope>
		    </dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency><!-- Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container server -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<dependency><!-- Auto REST API generation from JPA repositories -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		
		<dependency><!-- Includes auto configuration and hot-reloading -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
		
		<dependency><!-- Adds Hibernate / ORM support -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency><!-- Adds MySQL database driver at runtime -->
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<dependency><!-- For JSON and XML data binding -->
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-databind</artifactId>
		</dependency>
		
		<dependency><!-- Model Mapper (Conversion Entity <-> DTO) -->
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>${modelmapper.version}</version>
		</dependency>
		
		<dependency><!--  Security -->
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-security</artifactId>
	    </dependency>
	  
	   	<dependency><!-- Nice library that provides (among other things) @Getter/@Setter annotations -->
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency><!-- Google library for Java with many useful utilities -->
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>29.0-jre</version>
		</dependency>

		<dependency><!-- Nice utilities, e.g. StringUtils -->
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.11</version>
		</dependency>

		<dependency><!-- JSON processing and object mapping library -->
		    <groupId>org.apache.johnzon</groupId>
		    <artifactId>johnzon-core</artifactId>
		</dependency>
		
		<dependency><!-- Includes testing libraries -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency><!-- Adds monitoring and operational information features -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		<dependency><!-- Access to AWS S3 -->
      		<groupId>software.amazon.awssdk</groupId>
	      	<artifactId>s3</artifactId>
		</dependency>
		
		<dependency><!-- Thumbnail generation library -->
		  	<groupId>net.coobird</groupId>
		  	<artifactId>thumbnailator</artifactId>
		  	<version>${thumbnailator.version}</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin> <!-- Copy final frontend artifacts to src/main/resources -->
               	<artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy compiled frontend content</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>src/main/resources/public</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>${compiled.frontend.path}</directory>
                                    <!-- <includes>
                                        <include>static/</include>
                                        <include>index.html</include>
										<include>favicon.ico</include>
                                    </includes>-->
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
        	</plugin>
			<plugin><!-- For packaging and running spring boot app -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>    
              			<mainClass>de.tforneberg.patchdb.ServerApp</mainClass>
           		</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
		      	<plugin><!-- Heroku plugin, can be removed if Heroku is not used for deployment -->
			        <groupId>com.heroku.sdk</groupId>
			        <artifactId>heroku-maven-plugin</artifactId>
			        <version>2.0.6</version>
	     		</plugin>
	            
	            <plugin><!-- TypeScript Code Generation. Not executed in default build. Call "mvn typescript-generator:generate" -->
				    <groupId>cz.habarta.typescript-generator</groupId>
				    <artifactId>typescript-generator-maven-plugin</artifactId>
				    <version>${typescript.codegeneration.version}</version>
				    <executions>
				        <execution>
				            <id>generate</id>
				            <goals>
				                <goal>generate</goal>
				            </goals>
				            <phase>process-classes</phase>
				        </execution>
				    </executions>
				    <configuration>
				        <jsonLibrary>jackson2</jsonLibrary>
				        <classPatterns>
				            <pattern>${typescript.codegeneration.pattern}</pattern>
				        </classPatterns>
				        <customTypeMappings>
                    		<mapping>java.sql.Date:string</mapping>
               			</customTypeMappings>
				        <outputKind>module</outputKind>
				        <outputFileType>implementationFile</outputFileType>
				        <mapClasses>asClasses</mapClasses>
				        <excludeClassPatterns>
				        	<excludeClassPattern>
				        		${typescript.codegeneration.pattern}View
				        	</excludeClassPattern>
				        	<excludeClassPattern>
				        		${typescript.codegeneration.pattern}Views
				        	</excludeClassPattern>
			        	</excludeClassPatterns>
				        <mapEnum>asEnum</mapEnum>
				        <nonConstEnums>true</nonConstEnums>
				        <outputFile>${frontend.generated.file.path}</outputFile>
				    </configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>